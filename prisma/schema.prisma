// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  userName  String   @unique
  password  String
  createdAt DateTime @default(now())

  tokens Token[]
  posts  Post[]
  comments Comment[]
}

model Token {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  type      TokenType @default(REFRESH)
  expiresAt DateTime
  createdAt DateTime  @default(now())
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TokenType {
  REFRESH
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId Int
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]

  tags PostTag[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  authorId Int
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Tag {
  id Int @id @default(autoincrement())
  name String @unique

  posts PostTag[]
}

model PostTag {
  id Int @id @default(autoincrement())
  postId Int
  tagId Int

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
}
